$version Generated by VerilatedVcd $end
$date Thu Jan 23 11:52:36 2025
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 !# clk $end
  $var wire  8 $# out_byte [7:0] $end
  $var wire  1 %# out_byte_en $end
  $var wire  1 "# resetn $end
  $var wire  1 ## trap $end
  $scope module system $end
   $var wire 32 &# FAST_MEMORY [31:0] $end
   $var wire 32 '# MEM_SIZE [31:0] $end
   $var wire  1 !# clk $end
   $var wire 32 0 cycle_counter [31:0] $end
   $var wire 32 (# m_read_data [31:0] $end
   $var wire  1 )# m_read_en $end
   $var wire 32 ) mem_addr [31:0] $end
   $var wire  1 ' mem_instr $end
   $var wire 32 - mem_la_addr [31:0] $end
   $var wire  1 t" mem_la_read $end
   $var wire 32 . mem_la_wdata [31:0] $end
   $var wire  1 u" mem_la_write $end
   $var wire  4 / mem_la_wstrb [3:0] $end
   $var wire 32 , mem_rdata [31:0] $end
   $var wire  1 ( mem_ready $end
   $var wire  1 & mem_valid $end
   $var wire 32 * mem_wdata [31:0] $end
   $var wire  4 + mem_wstrb [3:0] $end
   $var wire  8 $ out_byte [7:0] $end
   $var wire  1 % out_byte_en $end
   $var wire  1 "# resetn $end
   $var wire  1 # trap $end
   $scope module picorv32_core $end
    $var wire  1 +# BARREL_SHIFTER [0:0] $end
    $var wire  1 *# CATCH_ILLINSN [0:0] $end
    $var wire  1 *# CATCH_MISALIGN [0:0] $end
    $var wire  1 +# COMPRESSED_ISA [0:0] $end
    $var wire  1 *# ENABLE_COUNTERS [0:0] $end
    $var wire  1 *# ENABLE_COUNTERS64 [0:0] $end
    $var wire  1 *# ENABLE_DIV [0:0] $end
    $var wire  1 *# ENABLE_FAST_MUL [0:0] $end
    $var wire  1 +# ENABLE_IRQ [0:0] $end
    $var wire  1 *# ENABLE_IRQ_QREGS [0:0] $end
    $var wire  1 *# ENABLE_IRQ_TIMER [0:0] $end
    $var wire  1 *# ENABLE_MUL [0:0] $end
    $var wire  1 +# ENABLE_PCPI [0:0] $end
    $var wire  1 *# ENABLE_REGS_16_31 [0:0] $end
    $var wire  1 *# ENABLE_REGS_DUALPORT [0:0] $end
    $var wire  1 +# ENABLE_TRACE [0:0] $end
    $var wire 32 -# LATCHED_IRQ [31:0] $end
    $var wire  1 +# LATCHED_MEM_RDATA [0:0] $end
    $var wire 32 ,# MASKED_IRQ [31:0] $end
    $var wire 32 .# PROGADDR_IRQ [31:0] $end
    $var wire 32 ,# PROGADDR_RESET [31:0] $end
    $var wire  1 +# REGS_INIT_ZERO [0:0] $end
    $var wire 32 -# STACKADDR [31:0] $end
    $var wire 36 ;# TRACE_ADDR [35:0] $end
    $var wire 36 9# TRACE_BRANCH [35:0] $end
    $var wire 36 =# TRACE_IRQ [35:0] $end
    $var wire  1 +# TWO_CYCLE_ALU [0:0] $end
    $var wire  1 +# TWO_CYCLE_COMPARE [0:0] $end
    $var wire  1 *# TWO_STAGE_SHIFT [0:0] $end
    $var wire  1 *# WITH_PCPI [0:0] $end
    $var wire 32 K" alu_add_sub [31:0] $end
    $var wire  1 N" alu_eq $end
    $var wire  1 P" alu_lts $end
    $var wire  1 O" alu_ltu $end
    $var wire 32 E" alu_out [31:0] $end
    $var wire  1 G" alu_out_0 $end
    $var wire  1 H" alu_out_0_q $end
    $var wire 32 F" alu_out_q [31:0] $end
    $var wire 32 L" alu_shl [31:0] $end
    $var wire 32 M" alu_shr [31:0] $end
    $var wire  1 I" alu_wait $end
    $var wire  1 J" alu_wait_2 $end
    $var wire 64 '" cached_ascii_instr [63:0] $end
    $var wire 32 )" cached_insn_imm [31:0] $end
    $var wire 32 *" cached_insn_opcode [31:0] $end
    $var wire  5 -" cached_insn_rd [4:0] $end
    $var wire  5 +" cached_insn_rs1 [4:0] $end
    $var wire  5 ," cached_insn_rs2 [4:0] $end
    $var wire  1 v" clear_prefetched_high_word $end
    $var wire  1 Q" clear_prefetched_high_word_q $end
    $var wire  1 !# clk $end
    $var wire  1 R! compressed_instr $end
    $var wire 64 9 count_cycle [63:0] $end
    $var wire 64 ; count_instr [63:0] $end
    $var wire  8 ." cpu_state [7:0] $end
    $var wire  8 F# cpu_state_exec [7:0] $end
    $var wire  8 C# cpu_state_fetch [7:0] $end
    $var wire  8 D# cpu_state_ld_rs1 [7:0] $end
    $var wire  8 E# cpu_state_ld_rs2 [7:0] $end
    $var wire  8 I# cpu_state_ldmem [7:0] $end
    $var wire  8 G# cpu_state_shift [7:0] $end
    $var wire  8 H# cpu_state_stmem [7:0] $end
    $var wire  8 B# cpu_state_trap [7:0] $end
    $var wire 32 J cpuregs(0) [31:0] $end
    $var wire 32 K cpuregs(1) [31:0] $end
    $var wire 32 T cpuregs(10) [31:0] $end
    $var wire 32 U cpuregs(11) [31:0] $end
    $var wire 32 V cpuregs(12) [31:0] $end
    $var wire 32 W cpuregs(13) [31:0] $end
    $var wire 32 X cpuregs(14) [31:0] $end
    $var wire 32 Y cpuregs(15) [31:0] $end
    $var wire 32 Z cpuregs(16) [31:0] $end
    $var wire 32 [ cpuregs(17) [31:0] $end
    $var wire 32 \ cpuregs(18) [31:0] $end
    $var wire 32 ] cpuregs(19) [31:0] $end
    $var wire 32 L cpuregs(2) [31:0] $end
    $var wire 32 ^ cpuregs(20) [31:0] $end
    $var wire 32 _ cpuregs(21) [31:0] $end
    $var wire 32 ` cpuregs(22) [31:0] $end
    $var wire 32 a cpuregs(23) [31:0] $end
    $var wire 32 b cpuregs(24) [31:0] $end
    $var wire 32 c cpuregs(25) [31:0] $end
    $var wire 32 d cpuregs(26) [31:0] $end
    $var wire 32 e cpuregs(27) [31:0] $end
    $var wire 32 f cpuregs(28) [31:0] $end
    $var wire 32 g cpuregs(29) [31:0] $end
    $var wire 32 M cpuregs(3) [31:0] $end
    $var wire 32 h cpuregs(30) [31:0] $end
    $var wire 32 i cpuregs(31) [31:0] $end
    $var wire 32 N cpuregs(4) [31:0] $end
    $var wire 32 O cpuregs(5) [31:0] $end
    $var wire 32 P cpuregs(6) [31:0] $end
    $var wire 32 Q cpuregs(7) [31:0] $end
    $var wire 32 R cpuregs(8) [31:0] $end
    $var wire 32 S cpuregs(9) [31:0] $end
    $var wire 32 T" cpuregs_rs1 [31:0] $end
    $var wire 32 U" cpuregs_rs2 [31:0] $end
    $var wire 32 S" cpuregs_wrdata [31:0] $end
    $var wire  1 R" cpuregs_write $end
    $var wire 32 @" current_pc [31:0] $end
    $var wire 64 q! dbg_ascii_instr [63:0] $end
    $var wire 128 0" dbg_ascii_state [127:0] $end
    $var wire 32 C dbg_insn_addr [31:0] $end
    $var wire 32 s! dbg_insn_imm [31:0] $end
    $var wire 32 B dbg_insn_opcode [31:0] $end
    $var wire  5 v! dbg_insn_rd [4:0] $end
    $var wire  5 t! dbg_insn_rs1 [4:0] $end
    $var wire  5 u! dbg_insn_rs2 [4:0] $end
    $var wire 32 ) dbg_mem_addr [31:0] $end
    $var wire  1 ' dbg_mem_instr $end
    $var wire 32 , dbg_mem_rdata [31:0] $end
    $var wire  1 ( dbg_mem_ready $end
    $var wire  1 & dbg_mem_valid $end
    $var wire 32 * dbg_mem_wdata [31:0] $end
    $var wire  4 + dbg_mem_wstrb [3:0] $end
    $var wire  1 $" dbg_next $end
    $var wire 32 w! dbg_rs1val [31:0] $end
    $var wire  1 y! dbg_rs1val_valid $end
    $var wire 32 x! dbg_rs2val [31:0] $end
    $var wire  1 z! dbg_rs2val_valid $end
    $var wire  1 &" dbg_valid_insn $end
    $var wire 32 Z! decoded_imm [31:0] $end
    $var wire 32 [! decoded_imm_j [31:0] $end
    $var wire  5 W! decoded_rd [4:0] $end
    $var wire  5 J# decoded_rs [4:0] $end
    $var wire  5 X! decoded_rs1 [4:0] $end
    $var wire  5 Y! decoded_rs2 [4:0] $end
    $var wire  1 ^! decoder_pseudo_trigger $end
    $var wire  1 _! decoder_pseudo_trigger_q $end
    $var wire  1 \! decoder_trigger $end
    $var wire  1 ]! decoder_trigger_q $end
    $var wire  1 D" do_waitirq $end
    $var wire 32 5 eoi [31:0] $end
    $var wire 32 ?# i [31:0] $end
    $var wire  1 @! instr_add $end
    $var wire  1 7! instr_addi $end
    $var wire  1 I! instr_and $end
    $var wire  1 <! instr_andi $end
    $var wire  1 &! instr_auipc $end
    $var wire  1 )! instr_beq $end
    $var wire  1 ,! instr_bge $end
    $var wire  1 .! instr_bgeu $end
    $var wire  1 +! instr_blt $end
    $var wire  1 -! instr_bltu $end
    $var wire  1 *! instr_bne $end
    $var wire  1 N! instr_ecall_ebreak $end
    $var wire  1 O! instr_fence $end
    $var wire  1 P! instr_getq $end
    $var wire  1 '! instr_jal $end
    $var wire  1 (! instr_jalr $end
    $var wire  1 /! instr_lb $end
    $var wire  1 2! instr_lbu $end
    $var wire  1 0! instr_lh $end
    $var wire  1 3! instr_lhu $end
    $var wire  1 %! instr_lui $end
    $var wire  1 1! instr_lw $end
    $var wire  1 S! instr_maskirq $end
    $var wire  1 H! instr_or $end
    $var wire  1 ;! instr_ori $end
    $var wire  1 J! instr_rdcycle $end
    $var wire  1 K! instr_rdcycleh $end
    $var wire  1 L! instr_rdinstr $end
    $var wire  1 M! instr_rdinstrh $end
    $var wire  1 R! instr_retirq $end
    $var wire  1 4! instr_sb $end
    $var wire  1 Q! instr_setq $end
    $var wire  1 5! instr_sh $end
    $var wire  1 B! instr_sll $end
    $var wire  1 =! instr_slli $end
    $var wire  1 C! instr_slt $end
    $var wire  1 8! instr_slti $end
    $var wire  1 9! instr_sltiu $end
    $var wire  1 D! instr_sltu $end
    $var wire  1 G! instr_sra $end
    $var wire  1 ?! instr_srai $end
    $var wire  1 F! instr_srl $end
    $var wire  1 >! instr_srli $end
    $var wire  1 A! instr_sub $end
    $var wire  1 6! instr_sw $end
    $var wire  1 U! instr_timer $end
    $var wire  1 V! instr_trap $end
    $var wire  1 T! instr_waitirq $end
    $var wire  1 E! instr_xor $end
    $var wire  1 :! instr_xori $end
    $var wire 32 3# irq [31:0] $end
    $var wire  1 F irq_active $end
    $var wire 32 6# irq_buserror [31:0] $end
    $var wire  1 E irq_delay $end
    $var wire 32 5# irq_ebreak [31:0] $end
    $var wire 32 G irq_mask [31:0] $end
    $var wire 32 H irq_pending [31:0] $end
    $var wire  2 /" irq_state [1:0] $end
    $var wire 32 4# irq_timer [31:0] $end
    $var wire 32 7# irqregs_offset [31:0] $end
    $var wire  1 k! is_alu_reg_imm $end
    $var wire  1 l! is_alu_reg_reg $end
    $var wire  1 i! is_beq_bne_blt_bge_bltu_bgeu $end
    $var wire  1 m! is_compare $end
    $var wire  1 c! is_jalr_addi_slti_sltiu_xori_ori_andi $end
    $var wire  1 a! is_lb_lh_lw_lbu_lhu $end
    $var wire  1 j! is_lbu_lhu_lw $end
    $var wire  1 `! is_lui_auipc_jal $end
    $var wire  1 f! is_lui_auipc_jal_jalr_addi_add_sub $end
    $var wire  1 n! is_rdcycle_rdcycleh_rdinstr_rdinstrh $end
    $var wire  1 d! is_sb_sh_sw $end
    $var wire  1 e! is_sll_srl_sra $end
    $var wire  1 b! is_slli_srli_srai $end
    $var wire  1 g! is_slti_blt_slt $end
    $var wire  1 h! is_sltiu_bltu_sltu $end
    $var wire  1 !! last_mem_valid $end
    $var wire  1 9" latched_branch $end
    $var wire  1 :" latched_compr $end
    $var wire  1 >" latched_is_lb $end
    $var wire  1 =" latched_is_lh $end
    $var wire  1 <" latched_is_lu $end
    $var wire  5 ?" latched_rd [4:0] $end
    $var wire  1 8" latched_stalu $end
    $var wire  1 7" latched_store $end
    $var wire  1 ;" latched_trace $end
    $var wire  1 %" launch_next_insn $end
    $var wire 16 A# mem_16bit_buffer [15:0] $end
    $var wire 32 ) mem_addr [31:0] $end
    $var wire  1 $! mem_busy $end
    $var wire  1 x mem_do_prefetch $end
    $var wire  1 z mem_do_rdata $end
    $var wire  1 y mem_do_rinst $end
    $var wire  1 { mem_do_wdata $end
    $var wire  1 w" mem_done $end
    $var wire  1 ' mem_instr $end
    $var wire 32 - mem_la_addr [31:0] $end
    $var wire  1 @# mem_la_firstword $end
    $var wire  1 ~ mem_la_firstword_reg $end
    $var wire  1 @# mem_la_firstword_xfer $end
    $var wire  1 t" mem_la_read $end
    $var wire  1 } mem_la_secondword $end
    $var wire  1 @# mem_la_use_prefetched_high_word $end
    $var wire 32 . mem_la_wdata [31:0] $end
    $var wire  1 u" mem_la_write $end
    $var wire  4 / mem_la_wstrb [3:0] $end
    $var wire 32 , mem_rdata [31:0] $end
    $var wire 32 #! mem_rdata_latched [31:0] $end
    $var wire 32 #! mem_rdata_latched_noshuffle [31:0] $end
    $var wire 32 w mem_rdata_q [31:0] $end
    $var wire 32 v mem_rdata_word [31:0] $end
    $var wire  1 ( mem_ready $end
    $var wire  2 t mem_state [1:0] $end
    $var wire  1 & mem_valid $end
    $var wire 32 * mem_wdata [31:0] $end
    $var wire  2 u mem_wordsize [1:0] $end
    $var wire  4 + mem_wstrb [3:0] $end
    $var wire  1 | mem_xfer $end
    $var wire 64 o! new_ascii_instr [63:0] $end
    $var wire 32 A next_insn_opcode [31:0] $end
    $var wire 32 C" next_irq_pending [31:0] $end
    $var wire 32 D next_pc [31:0] $end
    $var wire 32 m pcpi_div_rd [31:0] $end
    $var wire  1 o pcpi_div_ready $end
    $var wire  1 n pcpi_div_wait $end
    $var wire  1 l pcpi_div_wr $end
    $var wire 32 2 pcpi_insn [31:0] $end
    $var wire 32 q pcpi_int_rd [31:0] $end
    $var wire  1 s pcpi_int_ready $end
    $var wire  1 r pcpi_int_wait $end
    $var wire  1 p pcpi_int_wr $end
    $var wire 32 k pcpi_mul_rd [31:0] $end
    $var wire  1 j pcpi_mul_ready $end
    $var wire  1 @# pcpi_mul_wait $end
    $var wire  1 j pcpi_mul_wr $end
    $var wire 32 0# pcpi_rd [31:0] $end
    $var wire  1 2# pcpi_ready $end
    $var wire 32 3 pcpi_rs1 [31:0] $end
    $var wire 32 4 pcpi_rs2 [31:0] $end
    $var wire  1 B" pcpi_timeout $end
    $var wire  4 A" pcpi_timeout_counter [3:0] $end
    $var wire  1 1 pcpi_valid $end
    $var wire  1 1# pcpi_wait $end
    $var wire  1 /# pcpi_wr $end
    $var wire  1 "! prefetched_high_word $end
    $var wire 64 {! q_ascii_instr [63:0] $end
    $var wire 32 }! q_insn_imm [31:0] $end
    $var wire 32 ~! q_insn_opcode [31:0] $end
    $var wire  5 #" q_insn_rd [4:0] $end
    $var wire  5 !" q_insn_rs1 [4:0] $end
    $var wire  5 "" q_insn_rs2 [4:0] $end
    $var wire 32 > reg_next_pc [31:0] $end
    $var wire 32 3 reg_op1 [31:0] $end
    $var wire 32 4 reg_op2 [31:0] $end
    $var wire 32 ? reg_out [31:0] $end
    $var wire 32 = reg_pc [31:0] $end
    $var wire  5 @ reg_sh [4:0] $end
    $var wire 32 7# regfile_size [31:0] $end
    $var wire 32 8# regindex_bits [31:0] $end
    $var wire  1 "# resetn $end
    $var wire  1 5" set_mem_do_rdata $end
    $var wire  1 4" set_mem_do_rinst $end
    $var wire  1 6" set_mem_do_wdata $end
    $var wire 32 I timer [31:0] $end
    $var wire 36 7 trace_data [35:0] $end
    $var wire  1 6 trace_valid $end
    $var wire  1 # trap $end
    $scope module genblk1 $end
     $scope module pcpi_mul $end
      $var wire 32 K# EXTRA_INSN_FFS [31:0] $end
      $var wire 32 K# EXTRA_MUL_FFS [31:0] $end
      $var wire 32 K# MUL_CLKGATE [31:0] $end
      $var wire  4 W" active [3:0] $end
      $var wire  1 !# clk $end
      $var wire  1 |" instr_any_mul $end
      $var wire  1 }" instr_any_mulh $end
      $var wire  1 x" instr_mul $end
      $var wire  1 y" instr_mulh $end
      $var wire  1 z" instr_mulhsu $end
      $var wire  1 {" instr_mulhu $end
      $var wire  1 ~" instr_rs1_signed $end
      $var wire  1 y" instr_rs2_signed $end
      $var wire 32 2 pcpi_insn [31:0] $end
      $var wire  1 d" pcpi_insn_valid $end
      $var wire  1 e" pcpi_insn_valid_q $end
      $var wire 32 k pcpi_rd [31:0] $end
      $var wire  1 j pcpi_ready $end
      $var wire 32 3 pcpi_rs1 [31:0] $end
      $var wire 32 4 pcpi_rs2 [31:0] $end
      $var wire  1 1 pcpi_valid $end
      $var wire  1 @# pcpi_wait $end
      $var wire  1 j pcpi_wr $end
      $var wire 64 `" rd [63:0] $end
      $var wire 64 b" rd_q [63:0] $end
      $var wire  1 "# resetn $end
      $var wire 33 X" rs1 [32:0] $end
      $var wire 33 \" rs1_q [32:0] $end
      $var wire 33 Z" rs2 [32:0] $end
      $var wire 33 ^" rs2_q [32:0] $end
      $var wire  1 V" shift_out $end
     $upscope $end
    $upscope $end
    $scope module genblk4 $end
     $scope module pcpi_div $end
      $var wire  1 !# clk $end
      $var wire 32 m" dividend [31:0] $end
      $var wire 63 n" divisor [62:0] $end
      $var wire  1 j" instr_any_div_rem $end
      $var wire  1 f" instr_div $end
      $var wire  1 g" instr_divu $end
      $var wire  1 h" instr_rem $end
      $var wire  1 i" instr_remu $end
      $var wire  1 s" outsign $end
      $var wire 32 2 pcpi_insn [31:0] $end
      $var wire 32 m pcpi_rd [31:0] $end
      $var wire  1 o pcpi_ready $end
      $var wire 32 3 pcpi_rs1 [31:0] $end
      $var wire 32 4 pcpi_rs2 [31:0] $end
      $var wire  1 1 pcpi_valid $end
      $var wire  1 n pcpi_wait $end
      $var wire  1 k" pcpi_wait_q $end
      $var wire  1 l pcpi_wr $end
      $var wire 32 p" quotient [31:0] $end
      $var wire 32 q" quotient_msk [31:0] $end
      $var wire  1 "# resetn $end
      $var wire  1 r" running $end
      $var wire  1 l" start $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
b00000000 $
0%
0&
0'
0(
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b0000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b1111 /
b00000000000000000000000000000000 0
01
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
06
b000000000000000000000000000000000000 7
b0000000000000000000000000000000000000000000000000000000000000000 9
b0000000000000000000000000000000000000000000000000000000000000000 ;
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
0E
0F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
0j
b00000000000000000000000000000000 k
0l
b00000000000000000000000000000000 m
0n
0o
0p
b00000000000000000000000000000000 q
0r
0s
b00 t
b00 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
0x
0y
0z
0{
0|
0}
0~
0!!
0"!
b00000000000000000000000000000000 #!
0$!
0%!
0&!
0'!
0(!
0)!
0*!
0+!
0,!
0-!
0.!
0/!
00!
01!
02!
03!
04!
05!
06!
07!
08!
09!
0:!
0;!
0<!
0=!
0>!
0?!
0@!
0A!
0B!
0C!
0D!
0E!
0F!
0G!
0H!
0I!
0J!
0K!
0L!
0M!
0N!
0O!
0P!
0Q!
0R!
0S!
0T!
0U!
1V!
b00000 W!
b00000 X!
b00000 Y!
b00000000000000000000000000000000 Z!
b00000000000000000000000000000000 [!
0\!
0]!
0^!
0_!
0`!
0a!
0b!
0c!
0d!
0e!
0f!
0g!
0h!
0i!
0j!
0k!
0l!
0m!
0n!
b0000000000000000000000000000000000000000000000000000000000000000 o!
b0000000000000000000000000000000000000000000000000000000000000000 q!
b00000000000000000000000000000000 s!
b00000 t!
b00000 u!
b00000 v!
b00000000000000000000000000000000 w!
b00000000000000000000000000000000 x!
0y!
0z!
b0000000000000000000000000000000000000000000000000000000000000000 {!
b00000000000000000000000000000000 }!
b00000000000000000000000000000000 ~!
b00000 !"
b00000 ""
b00000 #"
0$"
0%"
0&"
b0000000000000000000000000000000000000000000000000000000000000000 '"
b00000000000000000000000000000000 )"
b00000000000000000000000000000000 *"
b00000 +"
b00000 ,"
b00000 -"
b00000000 ."
b00 /"
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
b00000 ?"
b00000000000000000000000000000000 @"
b0000 A"
0B"
b00000000000000000000000000000000 C"
0D"
b00000000000000000000000000000000 E"
b00000000000000000000000000000000 F"
0G"
0H"
0I"
0J"
b00000000000000000000000000000000 K"
b00000000000000000000000000000000 L"
b00000000000000000000000000000000 M"
1N"
0O"
0P"
0Q"
0R"
b00000000000000000000000000000000 S"
b00000000000000000000000000000000 T"
b00000000000000000000000000000000 U"
0V"
b0000 W"
b000000000000000000000000000000000 X"
b000000000000000000000000000000000 Z"
b000000000000000000000000000000000 \"
b000000000000000000000000000000000 ^"
b0000000000000000000000000000000000000000000000000000000000000000 `"
b0000000000000000000000000000000000000000000000000000000000000000 b"
0d"
0e"
0f"
0g"
0h"
0i"
0j"
0k"
0l"
b00000000000000000000000000000000 m"
b000000000000000000000000000000000000000000000000000000000000000 n"
b00000000000000000000000000000000 p"
b00000000000000000000000000000000 q"
0r"
0s"
0t"
0u"
0v"
0w"
0x"
0y"
0z"
0{"
0|"
0}"
0~"
1!#
0"#
0##
b00000000 $#
0%#
b00000000000000000000000000000001 &#
b00000000000000000001000000000000 '#
b00000000000000000000000000000000 (#
0)#
1*#
0+#
b00000000000000000000000000000000 ,#
b11111111111111111111111111111111 -#
b00000000000000000000000000010000 .#
0/#
b00000000000000000000000000000000 0#
01#
02#
b00000000000000000000000000000000 3#
b00000000000000000000000000000000 4#
b00000000000000000000000000000001 5#
b00000000000000000000000000000010 6#
b00000000000000000000000000100000 7#
b00000000000000000000000000000101 8#
b000100000000000000000000000000000000 9#
b001000000000000000000000000000000000 ;#
b100000000000000000000000000000000000 =#
b00000000000000000000000000000000 ?#
0@#
b0000000000000000 A#
b10000000 B#
b01000000 C#
b00100000 D#
b00010000 E#
b00001000 F#
b00000100 G#
b00000010 H#
b00000001 I#
b00000 J#
b00000000000000000000000000000000 K#
#5
0!#
#10
1(
b00000000000000000000000001110011 ,
b11111111111111111111111111111111 G
b00000000000000000000000001110011 v
b01000000 ."
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110011001100101011101000110001101101000 0"
b1111 A"
1!#
#15
0!#
#20
1!#
#25
0!#
#30
1!#
#35
0!#
#40
1!#
#45
0!#
#50
1!#
#55
0!#
#60
1!#
#65
0!#
#70
1!#
#75
0!#
#80
1!#
#85
0!#
#90
1!#
#95
0!#
#100
1!#
#105
0!#
#110
1!#
#115
0!#
#120
1!#
#125
0!#
#130
1!#
#135
0!#
#140
1!#
#145
0!#
#150
1!#
#155
0!#
#160
1!#
#165
0!#
#170
1!#
#175
0!#
#180
1!#
#185
0!#
#190
1!#
#195
0!#
#200
1!#
#205
0!#
1"#
#210
b00000000000000000000000000000001 0
b0000000000000000000000000000000000000000000000000000000000000001 9
1y
1$!
1t"
1!#
#215
0!#
#220
1&
1'
b00000000000000000000000000000010 0
b0000000000000000000000000000000000000000000000000000000000000010 9
b01 t
1|
b00000000000000000000000001110011 #!
0t"
1w"
1!#
#225
0!#
#230
0&
b00000000000000000000000000000011 0
b0000000000000000000000000000000000000000000000000000000000000011 9
b00000000000000000000000001110011 A
b00 t
b00000000000000000000000001110011 w
0y
0|
0$!
1\!
1%"
0w"
1!#
#235
0!#
#240
b00000000000000000000000000000100 -
b00000000000000000000000000000100 0
b00000000000000000000000001110011 2
b0000000000000000000000000000000000000000000000000000000000000100 9
b0000000000000000000000000000000000000000000000000000000000000001 ;
b00000000000000000000000000000100 >
b00000000000000000000000001110011 B
b00000000000000000000000000000100 D
1x
1$!
1N!
0\!
1]!
1$"
0%"
1&"
b00100000 ."
b00000000000000000000000000000000000000000000000000000000000000000000000000000000011011000110010001011111011100100111001100110001 0"
1t"
1!#
#245
0!#
#250
1&
b00000000000000000000000000000100 )
b11001011100010011001010011110011 ,
b00000000000000000000000000000101 0
b0000000000000000000000000000000000000000000000000000000000000101 9
b01 t
b11001011100010011001010011110011 v
1|
b11001011100010011001010011110011 #!
0]!
1y!
1z!
b00000000000000000000000001110011 ~!
0$"
b00000000000000000000000001110011 *"
b10000000 ."
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110100011100100110000101110000 0"
0t"
1!#
#255
0!#
#260
1#
0&
b00000000000000000000000000000110 0
b0000000000000000000000000000000000000000000000000000000000000110 9
b11001011100010011001010011110011 A
b11 t
b11001011100010011001010011110011 w
0|
1!#
1##
#265
0!#
#270
b00000000000000000000000000000111 0
b0000000000000000000000000000000000000000000000000000000000000111 9
0&"
1!#
